// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/sharing.proto

package main

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_Unknown StatusCode = 0
	StatusCode_Ok      StatusCode = 1
	StatusCode_Failed  StatusCode = 2
)

var StatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}

var StatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_05ee35f404afb9ea, []int{0}
}

type Status struct {
	Message              string     `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 StatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=StatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_05ee35f404afb9ea, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Status) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_Unknown
}

type Link struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Link) Reset()         { *m = Link{} }
func (m *Link) String() string { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()    {}
func (*Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_05ee35f404afb9ea, []int{1}
}

func (m *Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Link.Unmarshal(m, b)
}
func (m *Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Link.Marshal(b, m, deterministic)
}
func (m *Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Link.Merge(m, src)
}
func (m *Link) XXX_Size() int {
	return xxx_messageInfo_Link.Size(m)
}
func (m *Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Link proto.InternalMessageInfo

func (m *Link) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_05ee35f404afb9ea, []int{2}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterEnum("StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*Status)(nil), "Status")
	proto.RegisterType((*Link)(nil), "Link")
	proto.RegisterType((*Chunk)(nil), "Chunk")
}

func init() { proto.RegisterFile("protos/sharing.proto", fileDescriptor_05ee35f404afb9ea) }

var fileDescriptor_05ee35f404afb9ea = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0x5d, 0x4b, 0xc3, 0x40,
	0x10, 0xec, 0xc5, 0xf6, 0x42, 0xa7, 0x52, 0xc2, 0xe2, 0x43, 0x10, 0x8a, 0x35, 0x4f, 0x41, 0x30,
	0x42, 0xfd, 0x09, 0x01, 0x9f, 0xfc, 0x80, 0x84, 0xfe, 0x80, 0xd3, 0x1c, 0x6d, 0x48, 0xd8, 0x2b,
	0xb9, 0x8b, 0xfe, 0x7d, 0xb9, 0x6b, 0x83, 0x3e, 0xdd, 0xcd, 0xce, 0xce, 0xec, 0xec, 0xe2, 0xe6,
	0x34, 0x18, 0x67, 0xec, 0x93, 0x3d, 0xaa, 0xa1, 0xe5, 0x43, 0x11, 0x60, 0x56, 0x42, 0xd6, 0x4e,
	0xb9, 0xd1, 0x52, 0x8a, 0xf8, 0x4d, 0x5b, 0xab, 0x0e, 0x3a, 0x15, 0x5b, 0x91, 0x2f, 0xab, 0x09,
	0xd2, 0x1d, 0xe6, 0xa5, 0x69, 0x74, 0x1a, 0x6d, 0x45, 0xbe, 0xde, 0xad, 0x8a, 0xb3, 0xc0, 0x97,
	0xaa, 0x40, 0x64, 0x29, 0xe6, 0xaf, 0x2d, 0x77, 0x94, 0xe0, 0x6a, 0x1c, 0xfa, 0x8b, 0xdc, 0x7f,
	0xb3, 0x7b, 0x2c, 0xca, 0xe3, 0xc8, 0x9d, 0x77, 0x2f, 0x0d, 0x3b, 0xcd, 0x2e, 0xd0, 0xd7, 0xd5,
	0x04, 0x1f, 0x1e, 0x81, 0x3f, 0x43, 0x5a, 0x21, 0xde, 0x73, 0xc7, 0xe6, 0x87, 0x93, 0x19, 0x49,
	0x44, 0x1f, 0x5d, 0x22, 0x08, 0x90, 0x2f, 0xaa, 0xed, 0x75, 0x93, 0x44, 0xbb, 0x77, 0xac, 0xeb,
	0xf3, 0x06, 0xb5, 0x1e, 0xbe, 0xdb, 0x2f, 0x4d, 0x1b, 0xc8, 0xfd, 0xa9, 0x37, 0xaa, 0x21, 0x59,
	0x84, 0x61, 0xb7, 0xf1, 0x25, 0x62, 0x36, 0xcb, 0x05, 0x6d, 0xb0, 0xf4, 0x02, 0x1d, 0x12, 0x2e,
	0x0a, 0xff, 0xfc, 0x6b, 0xf8, 0x94, 0xe1, 0x0e, 0xcf, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1,
	0x8b, 0x3b, 0x4a, 0x1f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SharingServiceClient is the client API for SharingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SharingServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (SharingService_UploadClient, error)
	ShareLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Status, error)
}

type sharingServiceClient struct {
	cc *grpc.ClientConn
}

func NewSharingServiceClient(cc *grpc.ClientConn) SharingServiceClient {
	return &sharingServiceClient{cc}
}

func (c *sharingServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (SharingService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SharingService_serviceDesc.Streams[0], "/SharingService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &sharingServiceUploadClient{stream}
	return x, nil
}

type SharingService_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type sharingServiceUploadClient struct {
	grpc.ClientStream
}

func (x *sharingServiceUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sharingServiceUploadClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sharingServiceClient) ShareLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/SharingService/ShareLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharingServiceServer is the server API for SharingService service.
type SharingServiceServer interface {
	Upload(SharingService_UploadServer) error
	ShareLink(context.Context, *Link) (*Status, error)
}

// UnimplementedSharingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSharingServiceServer struct {
}

func (*UnimplementedSharingServiceServer) Upload(srv SharingService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedSharingServiceServer) ShareLink(ctx context.Context, req *Link) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareLink not implemented")
}

func RegisterSharingServiceServer(s *grpc.Server, srv SharingServiceServer) {
	s.RegisterService(&_SharingService_serviceDesc, srv)
}

func _SharingService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SharingServiceServer).Upload(&sharingServiceUploadServer{stream})
}

type SharingService_UploadServer interface {
	SendAndClose(*Status) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type sharingServiceUploadServer struct {
	grpc.ServerStream
}

func (x *sharingServiceUploadServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sharingServiceUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SharingService_ShareLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).ShareLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SharingService/ShareLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).ShareLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

var _SharingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SharingService",
	HandlerType: (*SharingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShareLink",
			Handler:    _SharingService_ShareLink_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _SharingService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/sharing.proto",
}
